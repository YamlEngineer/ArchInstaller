#!/usr/bin/env python
import yaml, sys, os, requests, subprocess


class colors:
    OKBLUE = "\033[94m"
    OKCYAN = "\033[96m"
    OKGREEN = "\033[92m"
    ENDC = "\033[0m"
    BOLD = "\033[1m"


class ArchLinux:
    def __init__(self) -> None:
        if len(sys.argv) != 1:
            with open("./config.yaml", mode="w") as f:
                response = requests.get(sys.argv[1])
                f.write(response.text)
        with open("./config.yaml") as data:
            config = yaml.load(data, Loader=yaml.FullLoader)
            self.__logs = config["logs"]
            self.__user = os.environ.get("USER")
            if self.__user == "root":
                self.__config = config["root"]
            else:
                self.__config = config["user"]

    def __ascii(self) -> None:
        ascii = """    ___    ____  ________  _______   ________________    __    __    __________ 
   /   |  / __ \/ ____/ / / /  _/ | / / ___/_  __/   |  / /   / /   / ____/ __ \\
  / /| | / /_/ / /   / /_/ // //  |/ /\__ \ / / / /| | / /   / /   / __/ / /_/ /
 / ___ |/ _, _/ /___/ __  // // /|  /___/ // / / ___ |/ /___/ /___/ /___/ _, _/ 
/_/  |_/_/ |_|\____/_/ /_/___/_/ |_//____//_/ /_/  |_/_____/_____/_____/_/ |_|  
"""
        print(ascii)

    def __chrootExecutor(self, command: str, logs: bool) -> None:
        if logs:
            os.system(f"chroot /mnt {command} && exit")
        else:
            os.system(
                f"chroot /mnt {command} >/dev/null 2>&1 && exit >/dev/null 2>&1"
            )

    def __executor(self, command: str, logs: bool) -> None:
        if logs:
            os.system(command)
        else:
            os.system(f"{command} >/dev/null 2>&1")

    def __setNtp(self) -> None:
        print(
            f"{colors.BOLD}{colors.OKGREEN}==>{colors.ENDC} set ntp to {self.__config['settings']['ntp']}"
        )
        self.__executor(
            f"timedatectl set-ntp {self.__config['settings']['ntp']}", False
        )

    def __driveConfigurator(self) -> None:
        print(f"{colors.BOLD}{colors.OKGREEN}==>{colors.ENDC} Config Hard Drive")  # with fdisk

        drive = self.__config["settings"]["drive"]

        # Format Hard Drive
        if drive["erase"]:
            print(
                f"    {colors.BOLD}{colors.OKBLUE}-->{colors.ENDC} Formatting Drive : {drive['blk']}"
            )
            self.__executor(f"echo 'g\nw\n' | fdisk {drive['blk']}", False)

        # Making Partitions
        print(f"    {colors.BOLD}{colors.OKBLUE}-->{colors.ENDC} Create Partitions")
        for partition in drive["partitions"]:
            size = partition["size"]
            number = partition["number"]
            label = partition["label"]
            filesystem = partition["filesystem"]
            print(
                f"        {colors.BOLD}{colors.OKBLUE}-->{colors.ENDC} Partition : {partition['label']}"
            )
            if partition["number"] == 1:
                self.__executor(
                    f"echo 'n\n{number}\n\n{size}\nt\n{filesystem}\nw\n' | fdisk {drive['blk']}",
                    False,
                )
            else:
                self.__executor(
                    f"echo 'n\n{number}\n\n{size}\nt\n{number}\n{filesystem}\nw\n' | fdisk {drive['blk']}",
                    False,
                )

            # Make FileSystem & add Label to Partition
            print(
                f"            {colors.BOLD}{colors.OKCYAN}-->{colors.ENDC} Make filesystem : {filesystem}"
            )
            match filesystem:
                case "uefi":
                    self.__executor(f"mkfs.fat -F32 {drive['blk']}{number}", False)
                    self.__executor(
                        f"fatlabel {drive['blk']}{number} {label}",
                        False,
                    )
                case "linux":
                    self.__executor(
                        f"echo 'y\n' | mkfs.ext4 -L {label} {drive['blk']}{number}",
                        False,
                    )
                case "swap":
                    self.__executor(f"mkswap {drive['blk']}{number}", False)

    def __mount(self):

        drive = self.__config["settings"]["drive"]
        # Mount Partitions
        print(f"{colors.BOLD}{colors.OKGREEN}==>{colors.ENDC} Mount Partitions ")

        # root -> /mnt
        print(f"    {colors.BOLD}{colors.OKBLUE}-->{colors.ENDC} ROOT")
        while not os.path.exists("/dev/disk/by-label/ROOT"):
            self.__executor("sleep 1", False)
        self.__executor(
            f"mount /dev/disk/by-label/ROOT /mnt",
            False,
        )
        self.__executor("mkdir -p /mnt/{home,boot/efi}", False)

        for partition in drive["partitions"]:
            if partition["label"] == "BOOT":
                # boot -> /mnt/boot/efi
                print(f"    {colors.OKBLUE}-->{colors.ENDC} BOOT")
                if partition['filesystem'] == 'uefi':
                    self.__executor(
                        f"mount {drive['blk']}{partition['number']} /mnt/boot/efi",
                        False,
                    )
                else:
                    self.__executor(
                        f"mount {drive['blk']}{partition['number']} /mnt/boot",
                        False,
                    )
            if partition["label"] == "HOME":
                # Mount Home Partition if exist
                # home -> /mnt/home
                print(f"    {colors.BOLD}{colors.OKBLUE}-->{colors.ENDC} HOME")
                self.__executor(
                    f"mount {drive['blk']}{partition['number']} /mnt/home",
                    False,
                )
            if partition["label"] == "SWAP":
                # enable swap if exists
                print(f"    {colors.OKBLUE}-->{colors.ENDC} Enable SWAP Partition ")
                self.__executor(f"swapon {drive['blk']}{partition['number']}", False)

    def __installPackages(self) -> None:
        print(f"{colors.BOLD}{colors.OKGREEN}==>{colors.ENDC} Install Packages")
        if self.__user == "root":
            for package in self.__config["packages"]:
                print(f"    {colors.BOLD}{colors.OKBLUE}-->{colors.ENDC} {package}")
                self.__executor(f"pacstrap /mnt {package}", self.__logs["packages"])
        else:
            for package in self.__config["packages"]:
                print(f"    {colors.BOLD}{colors.OKBLUE}-->{colors.ENDC} {package}")
                self.__executor(
                    f"{self.__config['aurhelper']} -S --skipreview --noconfirm {package}",
                    self.__logs["packages"],
                )

    def __genFstab(self) -> None:
        print(f"{colors.BOLD}{colors.OKGREEN}==>{colors.ENDC} Generating FSTAB")
        with open('/mnt/etc/fstab', 'w') as fstab:
            subprocess.run(['genfstab', '-U', '/mnt'], stdout=fstab)

    def __setLocale(self) -> None:
        print(f"{colors.BOLD}{colors.OKGREEN}==>{colors.ENDC} Setting Locale")
        with open("/mnt/etc/locale.gen", "a") as f:
            for locale in self.__config["settings"]["locale"]:
                print(f"    {colors.BOLD}{colors.OKBLUE}-->{colors.ENDC} Generating {locale}")
                f.write(f"{locale}\n")
        self.__chrootExecutor("locale-gen", False)
        print(
            f"    {colors.BOLD}{colors.OKBLUE}-->{colors.ENDC} set LANG env to {self.__config['settings']['lang']}"
        )
        with open("/mnt/etc/locale.conf", "w") as f:
            f.write(f"LANG={self.__config['settings']['lang']}\n")

    def __setTimeZone(self) -> None:
        print(
            f"{colors.BOLD}{colors.OKGREEN}==>{colors.ENDC} setting TimeZone to {self.__config['settings']['timezone']}"
        )
        self.__chrootExecutor(
            f"ln -fs /usr/share/zoneinfo/{self.__config['settings']['timezone']} /etc/localtime",
            False,
        )
        self.__chrootExecutor("hwclock --systohc --utc", False)

    def __installBootLoader(self):
        print(f"{colors.BOLD}{colors.OKGREEN}==>{colors.ENDC} Generating BootLoader")
        bootloader = self.__config['settings']['bootloader']
        if 'efidir' in bootloader:
            self.__chrootExecutor(
                f"grub-install --target={bootloader['target']} --boot-directory=/boot --efi-directory=/boot/efi --bootloader-id={bootloader['id']} --recheck", False
            )
        else:
            self.__chrootExecutor(
                f"grub-install --target={bootloader['target']} --boot-directory=/boot --bootloader-id={bootloader['id']} --recheck", False
            )

        self.__chrootExecutor(f"grub-mkconfig -o /boot/grub/grub.cfg", False)

    def __setHostName(self) -> None:
        print(
            f"{colors.BOLD}{colors.OKGREEN}==>{colors.ENDC} set hostname to {self.__config['settings']['hostname']}"
        )
        with open("/mnt/etc/hostname", "w") as f:
            f.write(self.__config["settings"]["hostname"])

    def __setHosts(self) -> None:
        print(f"{colors.BOLD}{colors.OKGREEN}==>{colors.ENDC} set hosts")
        with open("/mnt/etc/hosts", "a") as f:
            f.write(
                f"127.0.0.1     localhost.localdomain        localhost\n::1           localhost.localdomain        localhost\n127.0.1.1    {self.__config['settings']['hostname']}.localdomain    {self.__config['settings']['hostname']}"
            )

    def __enableServices(self):
        print(f"{colors.BOLD}{colors.OKGREEN}==>{colors.ENDC} Enabling Services")
        for service in self.__config["services"]:
            print(f"    {colors.BOLD}{colors.OKBLUE}-->{colors.ENDC} {service}")
            if self.__user == "root":
                self.__chrootExecutor(
                    f"systemctl enable {service}", self.__logs["services"]
                )
            else:
                self.__executor(
                    f"sudo systemctl enable {service}", self.__logs["services"]
                )

    def __setRootPassword(self):
        password = self.__config["account"]["rootpassword"]
        print(f"{colors.BOLD}{colors.OKGREEN}==>{colors.ENDC} Set Root Password")
        self.__chrootExecutor(f"echo -e '{password}\n{password}\n' | passwd", False)

    def __createUser(self):
        username = self.__config["account"]["username"]
        password = self.__config["account"]["password"]
        shell = self.__config["settings"]["shell"]
        print(f"{colors.BOLD}{colors.OKGREEN}==>{colors.ENDC} Creating User ({username})")
        self.__chrootExecutor(
            f"useradd -m -g users -G wheel -s {shell} {username}",
            False,
        )
        self.__chrootExecutor(f"echo -e '{password}\n{password}\n' | passwd {username}", False)

    def __sudoersConf(self, conf):
        if conf == "UA":
            self.__chrootExecutor("chmod 644 /etc/sudoers", False)
            self.__executor(
                r"sed -i 's/^#\s*\(%wheel\s*ALL=(ALL:ALL)\s*ALL\)/\1/' /mnt/etc/sudoers",
                False,
            )
            print(f"{colors.BOLD}{colors.OKGREEN}==>{colors.ENDC} Config sudoers file")
        elif conf == "UN":
            self.__executor(
                r"sudo sed -i 's/^#\s*\(%wheel\s*ALL=(ALL:ALL)\s*NOPASSWD:\s*ALL\)/\1/' /etc/sudoers",
                True,
            )
        elif conf == "CN":
            self.__executor(
                r"sudo sed -i 's/^\s*\(%wheel\s*ALL=(ALL:ALL)\s*NOPASSWD:\s*ALL\)/# \1/' /etc/sudoers",
                True,
            )

    def __copyInstaller(self):
        self.__executor(
            f"mkdir -p /mnt/home/{self.__config['account']['username']}/archinstaller",
            False,
        )
        self.__executor(
            f"cp -r . /mnt/home/{self.__config['account']['username']}/archinstaller",
            False,
        )
        self.__chrootExecutor(
            f"chown -R {self.__config['account']['username']}:wheel /mnt/home/{self.__config['account']['username']}/archinstaller",
            False,
        )

    def __umount(self):
        print(f"{colors.BOLD}{colors.OKGREEN}==>{colors.ENDC} Umount Partitions")
        self.__executor("umount -R /mnt", False)

    def __reboot(self):
        print("====================================\nInstallation completed!!")
        input("Press enter to reboot")
        self.__executor("reboot", True)

    def __installAURHelper(self):
        print(f"{colors.BOLD}{colors.OKGREEN}==>{colors.ENDC} Install AUR helper")
        self.__executor(
            f"cd /tmp && git clone http://aur.archlinux.org/{self.__config['aurhelper']}-bin.git",
            False,
        )
        self.__executor(
            f"cd /tmp/{self.__config['aurhelper']}-bin && makepkg -si --noconfirm",
            self.__logs["packages"],
        )

    def __runUserScripts(self):
        print(f"{colors.BOLD}{colors.OKGREEN}==>{colors.ENDC} Execute Your Scripts")
        for script in self.__config["scripts"]:
            print(f"    {colors.BOLD}{colors.OKBLUE}-->{colors.ENDC} {script['name']}")
            self.__executor(f"chmod +x {script['value']}", False)
            self.__executor(script["value"], self.__logs["scripts"])

    def start(self):
        self.__ascii()
        if self.__user == "root":
            self.__setNtp()
            self.__driveConfigurator()
            self.__mount()
            self.__installPackages()
            self.__genFstab()
            self.__setLocale()
            self.__setTimeZone()
            self.__installBootLoader()
            self.__setHostName()
            self.__setHosts()
            self.__enableServices()
            self.__setRootPassword()
            self.__createUser()
            self.__sudoersConf("UA")
            self.__copyInstaller()
            self.__umount()
            self.__reboot()
        else:
            self.__sudoersConf("UN")
            self.__installAURHelper()
            self.__installPackages()
            self.__runUserScripts()
            self.__enableServices()
            self.__sudoersConf("CN") 

ArchLinux().start()
